datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ========================
// Checkout and Digital Sales
// ========================

model Product {
  id              String   @id @default(uuid())
  name            String
  description     String
  price           Int  
  salesPageUrl    String  
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

  checkouts       Checkout[]
  
  // Relações de order bumps
  mainProductBumps ProductOrderBump[] @relation("MainProductOrderBumps") // Order bumps que este produto oferece
  asBumpProduct   ProductOrderBump[] @relation("BumpProducts")          // Quando este produto é oferecido como order bump
  
  // Configuração de redirecionamento após pagamento
  orders          Order[]
  orderItems      OrderItem[]
    
  @@index([isActive, deletedAt])
}

model Checkout {
  id              String    @id @default(uuid())  
  productId       String
  price           Int // valor em centavos  
  campaignName    String?
  upsellPageUrl   String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  product         Product   @relation(fields: [productId], references: [id])
  orders          Order[]
    
  @@index([isActive, deletedAt])
}

/// Order bump é um produto adicional ofertado no checkout de outro produto.
/// Order bump é um produto adicional que pode ser oferecido junto com outro produto
model ProductOrderBump {
  id                String   @id @default(uuid())
  mainProductId     String   // Produto principal que oferece o order bump
  bumpProductId     String   // Produto que será oferecido como order bump

  /// Produto principal que oferece o order bump
  mainProduct       Product  @relation("MainProductOrderBumps", fields: [mainProductId], references: [id])
  /// Produto que será ofertado como order bump
  bumpProduct       Product  @relation("BumpProducts", fields: [bumpProductId], references: [id])

  callToAction      String   // Ex: "Sim, eu aceito essa oferta especial!"
  title             String   // Título do order bump
  description       String   // Descrição do order bump
  showProductImage  Boolean  @default(false) // Se deve exibir a imagem do produto
  displayOrder      Int?     // Ordem de exibição
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  @@index([mainProductId])
  @@index([bumpProductId])
}

model Order {
  id              String        @id @default(uuid())
  checkoutId      String
  productId       String
  customerName    String
  customerEmail   String
  customerPhone   String
  paidAmount      Float

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  payment         Payment?
  checkout        Checkout      @relation(fields: [checkoutId], references: [id])
  product         Product       @relation(fields: [productId], references: [id])  
  orderItems      OrderItem[]

  @@index([createdAt])
  @@index([customerEmail])
}

model OrderItem {
  id          String  @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int     @default(1)
  priceAtTime Float    // Preço no momento da compra
  isOrderBump Boolean  @default(false)
  isUpsell    Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  order       Order   @relation(fields: [orderId], references: [id])
  product     Product @relation(fields: [productId], references: [id])
  
  @@index([orderId])
  @@index([productId])
}

model Webhook {
  id          String    @id @default(uuid())
  url         String
  events      String[]  // array de eventos: "order.created", "payment.approved", etc.
  active      Boolean   @default(true)
  secretKey   String?   // chave para assinatura HMAC
  description String?
  retryCount  Int       @default(0) // Número de tentativas de envio
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  logs        WebhookLog[]
  
  @@index([active])
}

model WebhookLog {
  id          String   @id @default(uuid())
  webhookId   String
  event       String
  payload     String   // JSON payload enviado
  response    String?  // resposta do servidor externo
  statusCode  Int?
  success     Boolean
  sentAt      DateTime @default(now())
  
  webhook     Webhook  @relation(fields: [webhookId], references: [id])
  
  @@index([webhookId, success])
  @@index([event, sentAt])
}

model Payment {
  id             String   @id @default(uuid())
  orderId        String   @unique
  status         String   // era PaymentStatus
  method         String   // pix, credit_card, boleto, etc.
  mercadoPagoId  String?  // ID do Mercado Pago
  amount         Int      // valor em centavos  
  rawData        Json?    // Dados crus do provedor de pagamento
  paidAt         DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  order          Order    @relation(fields: [orderId], references: [id])

  @@index([orderId])
}