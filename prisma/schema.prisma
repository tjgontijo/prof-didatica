datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Modelo para armazenar informações sobre os testes A/B
model AbTest {
  id          String    @id @default(uuid())  
  name        String    @unique // Identificador do teste (ex: "projeto-literario")
  description String?   // Descrição opcional do teste
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  events      AbEvent[]
  variants    Variant[]
}

// Modelo para armazenar as variantes de um teste
model Variant {
  id          String    @id @default(uuid())
  name        String    // Nome da variante (ex: "projeto-literario-a")
  description String?   // Descrição da variante
  weight      Float     @default(1.0) // Peso da variante para distribuição
  test        AbTest    @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId      String
  events      AbEvent[]

  @@unique([testId, name])
}

// Modelo para armazenar eventos de testes A/B
model AbEvent {
  id            String    @id @default(uuid())
  testId        String
  variantId     String
  eventType     String
  sessionId     String
  eventTime     DateTime  @default(now())
  createdAt     DateTime  @default(now())
  url           String?
  
  // Dados de localização
  country       String?
  state         String?
  city          String?
    
  // Dados de UTM
  utmSource     String?
  utmMedium     String?
  utmCampaign   String?
  utmTerm       String?
  utmContent    String?
  
  // Relações
  test          AbTest    @relation(fields: [testId], references: [id], onDelete: Cascade)
  variant       Variant   @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([testId, eventType])
  @@index([sessionId])
  @@index([createdAt])
  @@index([utmSource, utmMedium, utmCampaign])
  @@index([country, state, city])
}
